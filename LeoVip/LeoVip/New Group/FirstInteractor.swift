//
//  FirstInteractor.swift
//  LeoVip
//
//  Created by tecH on 13/05/20.
//  Copyright (c) 2020 vijayvir Singh. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
struct CandyEntity {
    let title: String
    let description: String
    let price: Float
    let imageName: String
}
protocol FirstBusinessLogic
{  func fetchCandy()
  func doSomething(request: First.Something.Request)
  func update(candyQuantity quantity:Int)
}

protocol FirstDataStore
{
  //var name: String { get set }
}

class FirstInteractor: FirstBusinessLogic, FirstDataStore {
  
    private static let vat:Float = 6.5
    private var candyEntity:CandyEntity?
    
   var presenter: FirstPresentationLogic?
   var worker: FirstWorker?
  //var name: String = ""
  
  // MARK: Do something
    func update(candyQuantity quantity:Int) {
       guard let candyEntity = self.candyEntity else {
                 return
             }
        let totalPrice = candyEntity.price * Float(quantity)
        let tax = (totalPrice/100) * FirstInteractor.vat
        let totalInclTax = totalPrice + tax
        presenter?.interactor(self,
                              didUpdateTotalPrice: totalPrice,
                              totalInclTax: totalInclTax,
                              vat: FirstInteractor.vat,
                              quantity: quantity)
        
    }
    func fetchCandy() {
        worker = FirstWorker()
        worker?.fetchCandy(callBack: { (candyEntityd) in
            self.candyEntity = candyEntityd
            presenter?.interactor(self, didFetch: candyEntityd)
        })
    }
    
    
  func doSomething(request: First.Something.Request)
  {
    worker = FirstWorker()

    
    let response = First.Something.Response()
    presenter?.presentSomething(response: response)
  }
}
