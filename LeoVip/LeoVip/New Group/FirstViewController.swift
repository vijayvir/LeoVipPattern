//
//  FirstViewController.swift
//  LeoVip
//
//  Created by tecH on 13/05/20.
//  Copyright (c) 2020 vijayvir Singh. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FirstDisplayLogic: class
{
    func display(CandyViewModel: First.Something.CandyViewModel)
    func display(totalPriceViewModel viewModel: First.Something.TotalPriceViewModel)
}


class Elements : NSObject {
        @IBOutlet weak private var candyImageView: UIImageView!
       @IBOutlet weak private var titleLabel: UILabel!
       @IBOutlet weak private var descriptionLabel: UILabel!
       @IBOutlet weak private var priceLabel: UILabel!
       @IBOutlet weak private var quantityStepper: UIStepper!
       @IBOutlet weak private var quantityLabel: UILabel!
       
        var closureDidValueChange : ((Int)-> Void)?
       @IBOutlet weak private var totalPriceLabel: UILabel!
       @IBOutlet weak private var taxLabel: UILabel!
       @IBOutlet weak private var inclTaxLabel: UILabel!
       @IBAction func quantityStepperValueChanged(_ sender: Any) {
        
        print("\(Int(quantityStepper!.value))")
        
        closureDidValueChange?((Int(quantityStepper!.value)))
    }
      func set(viewModel: First.Something.CandyViewModel) {
        titleLabel.text = viewModel.title
        descriptionLabel.text = viewModel.description
        priceLabel.text = viewModel.price

        candyImageView.image = UIImage(named: viewModel.imageName)
    }
    func modifyView(viewModel: First.Something.TotalPriceViewModel){
               quantityLabel.text = viewModel.quantity
               totalPriceLabel.text = viewModel.totalPrice
               taxLabel.text = viewModel.vat
               inclTaxLabel.text = viewModel.totalInclTax
    }
}

class FirstViewController: UIViewController, FirstDisplayLogic
{
    func display(totalPriceViewModel viewModel: First.Something.TotalPriceViewModel) {
        viewObject.modifyView(viewModel: viewModel)
    }
    
    func display(CandyViewModel: First.Something.CandyViewModel) {
        viewObject.set(viewModel: CandyViewModel)
    }
    
  var interactor: FirstBusinessLogic?
  var router: (NSObjectProtocol & FirstRoutingLogic & FirstDataPassing)?

  // MARK: Object lifecycle
  @IBOutlet weak private var viewObject: Elements!
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
   
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FirstInteractor()
    let presenter = FirstPresenter()
    let router = FirstRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    interactor?.fetchCandy()
    viewObject.closureDidValueChange = { value in
        print(value , "Is changed")
        self.interactor?.update(candyQuantity: value)
    }
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  

}
